package Bio::BioVeL::Handlers::SelectJobs;
use strict;
use warnings;
use XML::Quick;
use File::Slurp;
use MIME::Base64;
use Bio::BioVeL::Job;
use Bio::BioVeL::JobArgs;
use Apache2::Request;
use Apache2::RequestRec ();
use Apache2::RequestIO ();
use Apache2::Const -compile => qw(OK);

sub handler {
	my $r = shift;
	my $req = Apache2::Request->new($r);
	
	# create or lookup a job
	my %args = map { $_ => $req->param($_) } $req->param;
	my $job = Bio::BioVeL::Job->new(%args); # just need NAME, really
	
	# construct a string representation of the codes
	my $status_string;
	if ( $job->status == LAUNCHING ) {
		$status_string = 'launching';
	}
	elsif ( $job->status == RUNNING ) {
		$status_string = 'running';
	}
	elsif ( $job->status == SUCCESS ) {
		$status_string = 'done';
	}
	else {
		$status_string = 'error - exit value: ' . $job->status;
	}

	# return result
	$r->content_type('application/xml');
	print xml({
		'Jobs' => {
			'Job' => {
				'Arguments'      => $job->arguments->encoded,
				'Comment'        => "Generated by $0",
				'CPUs'           => $job->cpus,
				'Flag'           => undef,
				'Id'             => $job->id,
				'LastCheck'      => ( my $t = localtime ),
				'Name'           => $job->name,
				'Provenance'     => undef,
				'Status'         => $status_string,
				'Output'         => encode_base64(read_file($job->output)),
				'StandardOutput' => encode_base64(read_file($job->stdout)),
				'StandardError'  => encode_base64(read_file($job->stderr)),
			}
		}	
	});

	return Apache2::Const::OK;
}

1;